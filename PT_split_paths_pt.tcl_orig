#clk_st_div2
array unset slack_of
set check_clks {clk_cam_vfc clk_st_div2}
set check_clks {clk_pll_main clk_pll_storm}
set check_clks clk_pll_main
set check_clks {clk_pll_main pcie16_gen_clk_i_pcie_phy_top/gsern/qlm0/lane0/wrap/txdivclkx1 clk_pll_storm clk_cam_vfc clk_st_div2 clk_sclk_pem clk_ref}
set check_clks {sclk}

set slack_less -0.003
unset -nocomplain slack_less
array unset slack_less
set slack_less(max)  0.000
set slack_less(min) -0.003

source /nfs/users/noleksinski/tcl/ptime_proc/path_travel.tcl
proc tstamp {} {
  return [clock format [clock seconds] -format %m_%d_%H_%M]
}

set ts [tstamp]

set ts [lindex [file split [file readlink inp/grout/everest]] end]
if {$timing_all_clocks_propagated} {
  set ts "${ts}_prop"
} else {
  set ts "${ts}_ideal"
}

set split_pats {}
array unset ref_of
foreach part [concat $pnr_blks $phys_partitions [list sem_pd_core_? nws_scan_pd_?]] {
  set cells [get_cells -quiet -hier -filter "ref_name=~$part"]
  if {[sizeof_collection $cells] == 1 || [regexp {(sem_pd_core|nws_scan_pd)} $part]} {
    set cellidx 0
    foreach_in_collection cell $cells {
      set name [get_object_name $cell]
      set rrefname [get_attribute $cell ref_name]
      set split_pats [concat $split_pats $name]
      if {![regexp {\d$} $rrefname]} {
        set ref_of($name) ${rrefname}${cellidx}
        puts "INFO: [llength $name] $part : $name (id = ${rrefname}${cellidx})"
      } else {
        set ref_of($name) $rrefname
        puts "INFO: [llength $name] $part : $name (id = ${rrefname})"
      }
      incr cellidx 1
    }
  }
}
proc by_length {A B} {
  if {[string length $B] > [string length $A]} { return 1 } else { return -1 }
}
set split_pats [lsort -command by_length $split_pats]

foreach check_clk $check_clks {

regsub -all {/} $check_clk {_} dir_friendly

set split_dir split_results_${dir_friendly}_${run_type_specific}_$ts
file delete -force $split_dir
file mkdir $split_dir

set ref_of(top) top
foreach ref [array names ref_of] {
  for {set sb 0.0} {$sb <= -2.0} {incr $sb -0.1} {
    set key $ref,$sb
    set slack_of($key) 0
  }
}

set paths [get_timing_paths -delay $run_type -slack_less $slack_less($run_type) -max_paths 100000 -include -from [get_clocks $check_clk] -to [get_clocks $check_clk]]
foreach_in_collection path $paths {
  set sppat top
  set eppat top
  set last $path
  set sp [get_object_name [get_attribute $path startpoint]]
  set ep [get_object_name [get_attribute $path endpoint]]
  foreach pat $split_pats {
    if {[regexp "^$pat" $ep]} {
      set eppat $pat
      break
    }
  }
  foreach pat $split_pats {
    if {[regexp "^$pat" $sp]} {
      set sppat $pat
      break
    }
  }
  set travel [path_travel $path]
  set slack [format "%0.1f" [get_attribute $path slack]]
  if {$slack < -2.0} {set slack -2.0}
  set fn $split_dir/$ref_of($sppat)_____$ref_of($eppat).rpt
  set binkey $ref_of($eppat),$slack
  incr slack_of($binkey) 1
  report_timing -nosplit $path >> $fn
  echo "TRAVEL: $travel" >> $fn
  echo "" >> $fn
}

}

proc by_hier {A B} {
  set fa [split $A {,}]
  set ha [lindex $fa 0]
  set sa [lindex $fa 1]
  set fb [split $B {,}]
  set hb [lindex $fb 0]
  set sb [lindex $fb 1]
  if {$fb < $fa} {
    return 1
  } elseif {$fa < $fb} {
    return -1
  } else {
    if {$sa < $sb} {
      return 1
    } else {
      return -1
    }
  }
}

set last_ref null
set fout [open histogram.rpt w]
foreach key [lsort -command by_hier [array names slack_of]] {
  set fields [split $key {,}]
  set ref [lindex $fields 0]
  if {$last_ref != $ref} {
    puts $fout "\nVIOLATIONS INSIDE $ref:"
    set last_ref $ref
  }
  set slack [lindex $fields 1]
  puts $fout "$slack [format "%10i" $slack_of($key)] $ref"
}
close $fout
