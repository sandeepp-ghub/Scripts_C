procedure ::dc::common::report_BIP_timing_dc {
    -description "Reports internal and external timing paths for BIP"
    -args {
        {-rpt_dir \
             -type string \
             -description "Directory to write report to"
        }
    }
} {
    if { [info exists rpt_dir] && ![file isdirectory $rpt_dir] } { 
        puts "Warning: $rpt_dir is not a directory! Using default ./report"
        set rpt_dir [::common::get::report]
    }
 
    set file_prefix "$::SESSION(session)"
    set InternalWNS 0
    set InternalTNS 0
    set InternalNVP 0
    set InterfaceWNS 0
    set InterfaceTNS 0
    set InterfaceNVP 0

    
    # get_timing_paths -from [all_registers ] -to [all_registers] is taking large run time. 
    # So first taking violating end points and then seperating them for i2r and r2r 
    # https://jira.cavium.com/browse/IPBUBF-2084
    report_qor
    report_qor > for_BIP_timing_summary.rpt

    set fip "./for_BIP_timing_summary.rpt"
    set fin [open $fip r]
    
    while { [gets  $fin line] >= 0 } {
        #puts $line
        if { [regexp " Scenario " $line ] } {
            set scen [lindex $line 1]
            gets $fin grp_line
            set grp [lindex $grp_line 3]
            gets $fin dummy
            while { [gets  $fin line] >= 0 } {
                if { [regexp "\-\-\-\-\-\-" $line] } {
                    break
                }
                if { [regexp "Critical Path Slack:" $line]  } {
                    set wns [lindex $line 3]
                }
                if { [regexp "Total Negative Slack:" $line]  } {
                    set tns [lindex $line 3]
                }
                if { [regexp "No. of Violating Paths:" $line]  } {
                    set fep [lindex $line 4]
                }
            }
            #puts "$scen\t$grp\t $wns \t $tns \t $fep"
            dict set DATA  $scen $grp [ list $wns $tns $fep ]
        }
    }

    close $fin
    
    foreach scen  [dict keys $DATA ] {
        if { [regexp "max" $scen] } {
              set all [dict get $DATA $scen]
              foreach grp [dict keys $all] {
                  set values [dict get $all $grp]
                  puts "$grp $values"
                  set wns [lindex $values 0]
                  set tns [lindex $values 1]
                  set fep [lindex $values 2]
                  if { [regexp "INPUT" $grp ] || [regexp "OUTPUT" $grp ] || [regexp "COMB_PATHS" $grp ]} {
                      if { $wns < $InterfaceWNS } {
                             set InterfaceWNS $wns
                      }
                      set InterfaceTNS [expr $InterfaceTNS + $tns ]
                      set InterfaceNVP [expr $InterfaceNVP + $fep ]
                  } else {
                      if { $wns < $InternalWNS } {
                             set InternalWNS $wns
                      }
                      set InternalTNS [expr $InternalTNS + $tns ]
                      set InternalNVP [expr $InternalNVP + $fep ]
                  }
              }
        }
   }

    set fp [open ${rpt_dir}/$file_prefix.BIP_timing_summary.rpt w]
    puts  [format "%16s\t%10s\t%10s\t%10s" Group WNS TNS FEP]
    puts  [format "%16s\t%10.3f\t%10.3fs\t%10f" maxInternal $InternalWNS $InternalTNS $InternalNVP]
    puts  [format "%16s\t%10.3f\t%10.3fs\t%10f" maxInterface $InterfaceWNS $InterfaceTNS $InterfaceNVP]
    
    puts $fp [format "%16s\t%10s\t%10s\t%10s" Group WNS TNS FEP]
    puts $fp [format "%16s\t%10.3f\t%10.3fs\t%10f" maxInternal $InternalWNS $InternalTNS $InternalNVP]
    puts $fp [format "%16s\t%10.3f\t%10.3fs\t%10f" maxInterface $InterfaceWNS $InterfaceTNS $InterfaceNVP]
    
    close $fp
}
