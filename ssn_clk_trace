set cell_target_list {channel_mid channel_vr_bot channel_vr_top io_fabric}
set cell_target_list {channel_mid}
proc print_ssn_info {path} {
    #set path [index_collection [sort_collection [report_timing -through channel_vr_top/ssn_forward_bus_in[39] -collection -path_type full_clock -hpin -nworst 1 -max_paths 1]  slack] 0]  

    set all_h_pin [get_pins -of [get_pnr]]
    set sp_design [find_pnr [get_object_name [ga $path startpoint]]]
    set ep_design [find_pnr [get_object_name [ga $path endpoint]]]

    set data_hpins    [remove_from_collection -intersect $all_h_pin [get_pins [ga [ga $path timing_points] object]  -filter "is_hierarchical"]]
    set launch_hpins  [remove_from_collection -intersect $all_h_pin [get_pins [ga [ga [ga $path launch_clock_path] timing_points] object]  -filter "is_hierarchical"]]
    set capt_hpins  [remove_from_collection -intersect $all_h_pin [get_pins [ga [ga [ga $path capture_clock_path] timing_points] object]  -filter "is_hierarchical"]]

    set ep_data_in [get_object_name [remove_from_collection -intersect [get_pins ${ep_design}/* -filter "direction==in"] $data_hpins]]
    set sp_data_out [get_object_name [remove_from_collection -intersect [get_pins ${sp_design}/* -filter "direction==out"] $data_hpins]]

    set ep_clock_in [get_object_name [remove_from_collection -intersect [get_pins ${ep_design}/* -filter "direction==in"] $capt_hpins]]
    set sp_clock_in [get_object_name [remove_from_collection -intersect [get_pins ${sp_design}/* -filter "direction==in"] $launch_hpins]]

    set trace_clock_capt NA
    set trace_clock_launch NA
    set trace_clock_capt NA
    set trace_clock_launch NA
    set CON_STATUS ERROR

    set slack [ga $path slack]
    if [regexp forward $ep_data_in] {
	#set trace_clock_capt  [get_object_name [remove_from_collection -intersect [all_fanin_hpnr -to $ep_clock_in] [get_pins ${sp_design}/* -filter "direction==out"]]]
	set trace_clock_capt  [get_object_name [remove_from_collection -intersect [all_fanin_hpnr -to $ep_clock_in] [get_pins ${sp_design}/* -filter "direction==in"]]]
	#set trace_clock_launch NA
	set trace_clock_launch  $sp_clock_in
	#if { [llength $trace_clock_capt] == "1"} {set CON_STATUS GOOD} else {set CON_STATUS ERROR}
    } else {
	#set trace_clock_capt NA
	set trace_clock_capt  $ep_clock_in
	set trace_clock_launch [get_object_name [remove_from_collection -intersect [all_fanin_hpnr -to $sp_clock_in] [get_pins ${ep_design}/* -filter "direction==in"]]]
	#if { [llength $trace_clock_launch] == "1"} {set CON_STATUS GOOD} else {set CON_STATUS ERROR}
    }

    if {[llength $sp_clock_in] > 1} {
	foreach cp $sp_clock_in {
	    if {[sizeof_collection [remove_from_collection -intersect [remove_from_collection [get_pins $sp_clock_in] [get_pins $cp ]] [all_fanin_hpnr -to $cp]]] > 0} {
		set sp_clk_entry $cp
		break
	    }
	}
    } else {
	set sp_clk_entry $sp_clock_in
    }


    if {[llength $ep_clock_in] > 1} {
	foreach cp $ep_clock_in {
	    if {[sizeof_collection [remove_from_collection -intersect [remove_from_collection [get_pins $ep_clock_in] [get_pins $cp ]] [all_fanin_hpnr -to $cp]]] > 0} {
		set ep_clk_entry $cp
		break
	    }
	}
    } else {
	set ep_clk_entry $ep_clock_in
    }



    if {[llength $trace_clock_launch] > 1} {
	foreach cp $trace_clock_launch {
	    if {[sizeof_collection [remove_from_collection -intersect [remove_from_collection [get_pins $trace_clock_launch] [get_pins $cp ]] [all_fanin_hpnr -to $cp]]] > 0} {
		set l_clock_entry $cp
		break
	    }
	}
    } else {
	set l_clock_entry $trace_clock_launch
    }

    if {[llength $trace_clock_capt] > 1} {
	foreach cp $trace_clock_capt {
	    if {[sizeof_collection [remove_from_collection -intersect [remove_from_collection [get_pins $trace_clock_capt] [get_pins $cp ]] [all_fanin_hpnr -to $cp]]] > 0} {
		set c_clock_entry $cp
		break
	    }
	}
    } else {
	set c_clock_entry $trace_clock_capt
    }



    if {$c_clock_entry == $l_clock_entry} {set CON_STATUS GOOD} else {set CON_STATUS ERROR}
    echo "$CON_STATUS \($slack\) \t $sp_data_out \($sp_clk_entry :: $l_clock_entry\) \t==>\t $ep_data_in \($ep_clk_entry :: $c_clock_entry\)"
}

set scen [all_analysis_views] 
if [regexp setup $scen]  {set tim_type late} else {set tim_type early}


set all_ck_pins [all_registers -clock_pins]

foreach cell_inst $cell_target_list {

    redirect ${cell_inst}_${tim_type}_ssn.rpt {

	set block_ck_pins [get_pins -quiet  $all_ck_pins -filter "full_name=~${cell_inst}*"]

	set ssn_in_clocks [get_pins -quiet  -of [get_cells -quiet $cell_inst] -filter "direction==in && full_name=~*ssn*clock*"]
	set ssn_out_clocks [get_pins -quiet  -of [get_cells -quiet $cell_inst] -filter "direction==out && full_name=~*ssn*clock*"]
	set ssn_data_in [remove_from_collection [get_pins -quiet  -of [get_cells -quiet $cell_inst] -filter "direction==in && full_name=~*ssn*"] $ssn_in_clocks]
	set ssn_data_out [remove_from_collection [get_pins -quiet  -of [get_cells -quiet $cell_inst] -filter "direction==out && full_name=~*ssn*"] $ssn_out_clocks]


	echo "\nInput - Clock - Connectivity:\n"
	foreach_in_collection ck_pin $ssn_in_clocks {
	    set load_pins [get_object_name $ck_pin]
	    set driver_pins [get_object_name [get_pins -quiet  -quiet -of [get_db [ get_nets  -of [get_pins -quiet  $ck_pin]]  .hnets.name] -filter "direction==out"]]
	    echo "$driver_pins   ==> $load_pins"
	}


	echo "\nOutput - Clock - Connectivity:\n"
	foreach_in_collection ck_pin $ssn_out_clocks {
	    set driver_pins [get_object_name $ck_pin]
	    set load_pins [get_object_name [get_pins -quiet  -quiet -of [get_db [ get_nets  -of [get_pins -quiet  $ck_pin]]  .hnets.name] -filter "direction==in"]]
	    set loop_paths [remove_from_collection -intersect $block_ck_pins [all_fanout -flat -from $ck_pin -endpoints_only ]]
	    
	    echo "$driver_pins   ==> $load_pins :: FanoutCone-inSame-Block-Loop: [sizeof $loop_paths]"
	    if [sizeof $loop_paths] {
		foreach name [get_object_name $loop_paths] {echo "\t\t $name"}
	    }
	    
	}



	echo "\nINput - SSN - BUS connectivity - tracing\n"

	foreach_in_collection data_pin $ssn_data_in {

	    #set root_clock_pin [get_object_name [remove_from_collection -intersect $ssn_in_clocks [all_fanin_hpnr -to [remove_from_collection -intersect $block_ck_pins [get_pins -quiet  -of [get_cells -quiet  -of [all_fanout -flat -from $data_pin -endpoints_only]]]]]]]
	    set path   [index_collection [sort_collection [report_timing -${tim_type}  -through $data_pin -hpin  -path_type full_clock -collection -max_paths 1 -nworst 1 -group tessent_ssn_bus_clock_network] slack] 0]
	    #set slack [ga $path slack]
	    #set root_clock_pin [get_object_name [remove_from_collection -intersect $ssn_in_clocks [get_pins -quiet  [ga [ga [ga  $path capture_clock_path] timing_points] object]  -filter "is_hierarchical "]]]
	    #set load_pins [get_object_name $data_pin]
	    #set driver_pins [get_object_name [get_pins -quiet  -quiet -of [get_db [ get_nets  -of [get_pins -quiet  $data_pin]]  .hnets.name] -filter "direction==out"]]
	    #echo "\($slack\) \t $driver_pins ==> $load_pins ==> $root_clock_pin \([get_object_name [get_pins -quiet  -quiet -of [get_db [get_nets  -of [get_pins -quiet  $root_clock_pin]]  .hnets.name] -filter "direction==out"]]\)"
	    print_ssn_info $path
	}



	echo "\nOutput - SSN - BUS connectivity - tracing\n"

	foreach_in_collection data_pin $ssn_data_out {
	    set path  [index_collection [sort_collection [report_timing -${tim_type}  -through $data_pin -hpin  -path_type full_clock -collection -max_paths 1 -nworst 1 -group tessent_ssn_bus_clock_network] slack] 0]
	    # set slack [ga $path slack]
	    # set root_clock_pin [get_object_name [remove_from_collection -intersect $ssn_in_clocks [get_pins -quiet  [ga [ga [ga  $path launch_clock_path] timing_points] object]  -filter "is_hierarchical "]]]
	    # set driver_pins [get_object_name $data_pin] 
	    # set load_pins [get_object_name [get_pins -quiet  -quiet -of [get_db [ get_nets  -of [get_pins -quiet  $data_pin]]  .hnets.name] -filter "direction==in"]]
	    # echo "\($slack\) \t $root_clock_pin \([get_object_name [get_pins -quiet  -quiet -of [get_db [get_nets  -of [get_pins -quiet  $root_clock_pin]]  .hnets.name] -filter "direction==out"]]\) ==> $driver_pins ==> $load_pins "
	    print_ssn_info $path
	}


    }
}
