


set flog [open cdc_path_report1.log w]

foreach buf [ get_object_name  [get_cells -hierarchical -filter "full_name=~ *cdcbuf_marker/flag_buf_0*" ] ] {

    set ep [ get_object_name [all_fanout -flat -endpoints_only -from ${buf}/Z -trace_arcs all] ] 
    if {  [ llength $ep ] == 1  } {
        set ep_clk [ get_object_name  [ get_attribute  [get_pins -of  [get_cells -of $ep ] -filter "is_clock_pin==true" ] clocks ] ] 
        set sps [ get_object_name [ get_pins -quiet [all_fanin -flat -startpoints_only -to ${buf}/I -trace_arcs all] ] ] 
        set sps_ports [ get_object_name [ get_ports -quiet [all_fanin -flat -startpoints_only -to ${buf}/I -trace_arcs all] ] ] 
        puts  $flog "INFO : $buf has [ llength $sps] fanin"
        puts   "INFO : $buf has [ llength $sps] fanin"
        foreach sp $sps {
            set sp_clk [ get_object_name  [ get_attribute -quiet [get_pins $sp] clocks ]]
            if { [info exists sp_clk] && [regexp $ep_clk $sp_clk] } {
                redirect -append -file same_clock_cdc_buf_timing.rpt { report_timing -from $sp -through ${buf}/Z -to $ep -input_pins -nets -nosplit -include_hierarchical_pins -derate -voltage -crosstalk_delta -significant_digits 4 }
            } else {
                redirect -append -file different_clock_cdc_buf_timing.rpt { report_timing -from $sp -through ${buf}/Z -to $ep -input_pins -nets -nosplit -include_hierarchical_pins -derate -voltage -crosstalk_delta -significant_digits 4 }
            }
       }
       foreach sp_port $sps_ports {
           redirect -append -file input_port_cdc_buf_timing.rpt { report_timing -from $sp_port -through ${buf}/Z -to $ep -input_pins -nets -nosplit -include_hierarchical_pins -derate -voltage -crosstalk_delta -significant_digits 4 }
       }

    } else {
            puts $flog "WARN : $buf has [ llength $ep ] fanout"
            puts  "WARN : $buf has [ llength $ep ] fanout"
    }
}

close $flog
