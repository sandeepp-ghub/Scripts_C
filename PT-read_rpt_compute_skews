#!/bin/tclsh

set script_info [info script]

proc read_pt_rpt_compute_skews { fname } {
    if {![file exists $fname]} {
	puts "(E): Specified filename doesn't exists:"
	puts "     $fname"
    } else {
	set fid [open "| gzip -cd $fname" r]

	puts "(I): Reading in $filetail"
	
	# Initialize variables
	set startpoint ""
	set endpoint   ""
	set path_group ""
	set path_type  ""
	set begin_path_collection 0
	set end_path_collection 0
	set path_index 0
	set cells_in_path ""
	set nets_in_path  ""
	set endpoint_pin ""
	set startpoint_pin ""

	while {[gets $fid line] >= 0} {
	    if {[string match "*Startpoint:*" $line]} { set startpoint [lindex $line end] }
	    if {[string match "*Endpoint:*" $line]}  { set endpoint   [lindex $line end] }
	    
	    if {[string match "$startpoint/CP" [lindex $line 0]]} { 
		#puts "STARTING PATH COLLECTION ($path_index): $line"
		set begin_path_collection 1 
		set cells_in_path ""
		set nets_in_path  ""
		set startpoint_pin [lindex $line 0]
		set launch_arrival [lindex $line end-
	    } elseif {[string match "$endpoint/*" [lindex $line 0]] && $begin_path_collection } {
		incr path_index
		#puts "ENDING PATH COLLECTION ($path_index): $line"
		set begin_path_collection 0
		set end_path_collection   1
		set endpoint_pin [lindex $line 0]
		set unique_cells_in_path [lsort -unique $cells_in_path]
		set unique_nets_in_path  [lsort -unique $nets_in_path]
		# Data Dump to file
		puts $output_id "set ::path_collection($path_index) { {$path_group} {$path_type} {$startpoint_pin} {$endpoint_pin} { $unique_cells_in_path } { $unique_nets_in_path } }"
		
		# Reset variables
		set cells_in_path ""
		set nets_in_path ""
		set unique_cells_in_path ""
		set unique_nets_in_path ""
		set startpoint_pin ""
		set endpoint_pin ""
		set path_type ""
		set path_group ""
		
	    }
	    
	    if { $begin_path_collection } {
		if {[lindex $line 1] == "(net)" } { 
		    append nets_in_path " [lindex $line 0]" 
		} else {
		    append cells_in_path " [get_object [get_cell -of [get_pin [lindex $line 0]]]]"
		}
	    }
	    
	    set split_line [split $line ","]
	    set sp [string trim [lindex $split_line 0]]
	}
	
	puts $output_id ""
	puts $output_id "# -------------------------------------------------------------------"
	puts $output_id "puts { There are cells/nets from $path_index paths to analyze }"
	puts $output_id "puts { Call ::dn::highlight_cells_and_nets <path_index> }"
	puts $output_id "puts { ex: (1st)  ::dn::highlight_cells_and_nets 1 }"
	puts $output_id "puts { ex: (last) ::dn::highlight_cells_and_nets $path_index }"
	close $fid
	close $output_id
	puts "Analyzed $path_index paths"
	puts "Finished writing to $output_fname"
    }
    # End if/else {![file exists $fname]}
    
}
# End proc read_pt_failing_paths_rpt { fname }

# ----------------------------------------------------------
proc highlight_cells_and_nets { path_number } {
    puts "(I): Entering ::dn::highlight_cells_and_nets procedure ..."
    if {![info exists ::path_collection]} {
	puts "(E): Couldn't find ::path_collection array"
	return
    } elseif {![info exists ::path_collection($path_number)]} {
	puts "(E): Couldn't find ::path_collection($path_number)"
    } else {
	set path_group [lindex $::path_collection($path_number) 0]
	set path_type  [lindex $::path_collection($path_number) 1]
	set sp         [lindex $::path_collection($path_number) 2]
	set ep         [lindex $::path_collection($path_number) 3]
	set cells      [lindex $::path_collection($path_number) 4]
	set nets       [lindex $::path_collection($path_number) 5]
	
	#foreach cell $cells {		puts "cell: $cell" }
	
	# Cycle through each net
	select_obj [get_cells "$cells"]
	select_obj [get_nets  "$nets"]
	set color_index 64
	gui_highlight -index $color_index;
    }
}


# End namespace eval ::dn {}
puts "::dn::read_pt_rpt_compute_skews <corner_failing_paths.rpt.gz>"
