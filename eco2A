
#catch {setEcoMode -batchMode false}
#catch {setEcoMode -batchMode true -honorDontTouch false  -honorDontUse false  -honorFixedNetWire false -honorFixedStatus false -LEQCheck false  -refinePlace false -updateTiming false -prefixName ECO_HFix_1109}

###################
proc addBuffAlongRoute {NetName PinName {buff_cell BUFFD6BWP300H8P64PDULVT } {inv_cell INVD6BWP300H8P64PDULVT} {prefix on_route_buff}} {
    global k
    if {![info exists k]} {set k [format %0.0f [expr ceil([expr rand()] * 100000)]]}
    set BufBased 1; set InvBased 0

    set ViolTerm [db_get_term_by_name $PinName]
    set NetObj [db_get_net_by_name $NetName] 

    #set driveTerm [dbGet -e  $NetObj.allTerms.isOutput 1 -p1]
    set driveTerm [get_db $NetObj .drivers]
    set recvTerms [get_db $NetObj .loads]
    #if {$driveTerm == ""} {set driveTerm [dbget -e  [dbget -e top.terms.name $NetName -p].direction input -p]}
    #if {$recvTerms == ""} {set recvTerms [dbget -e  [dbget -e top.terms.name $NetName -p].direction output -p]}
    if {$recvTerms != "" && $driveTerm != ""} {
	set numInTerms [llength $recvTerms]

	foreach Wire [get_db  $NetObj .wires] {
	    foreach recvTerm $recvTerms {
		set WireHash($Wire,$recvTerm) 0
	    }
	}

	foreach recvTerm $recvTerms {
	    gui_deselect -all
	    select_net_p2p [get_obj_by_name [get_db $driveTerm .name]] [get_obj_by_name [get_db $recvTerm .name]]
	    foreach Wire [get_db selected -if {.obj_type == wire}] {
		set WireHash($Wire,$recvTerm) 1   
	    }
	}

	set TotalWire 0
	gui_deselect -all
	select_net_p2p [get_obj_by_name [get_db $driveTerm .name]] [get_obj_by_name [get_db  $ViolTerm .name]]

	set LongestWireLength [get_db [lindex [get_db selected -if {.obj_type == wire}] 0] .length]
	set LongestWire [lindex [get_db selected -if {.obj_type == wire}] 0]
	foreach Wire  [get_db selected -if {.obj_type == wire}] {
	    set WireLength [get_db $Wire .length]
	    if {$WireLength > $LongestWireLength} {
		set LongestWire $Wire
		set LongestWireLength $WireLength
	    }
	    set TotalWire [expr $TotalWire + $WireLength]
	}  

	gui_deselect -all
	set ReCt [get_db  $LongestWire .rect]
	
	set LLX [get_rect $ReCt -llx]
	set LLY [get_rect $ReCt -lly]
	set URX [get_rect $ReCt -urx]
	set URY [get_rect $ReCt -ury]

	set ReqTerms ""
	foreach recvTerm $recvTerms {
	    if {$WireHash($LongestWire,$recvTerm)==1} {
		lappend ReqTerms [get_db $recvTerm .name]
	    }
	}

	set  llx_lly_dist  [get_distance [get_db   $driveTerm .location] [list $LLX $LLY]]
	set  urx_ury_dist  [get_distance [get_db   $driveTerm .location] [list $URX $URY]]

	if {$LongestWireLength >= 70 } {set BufBased 0; set InvBased 1} else {set BufBased 1; set InvBased 0}
	if {$BufBased} {
	    if {$urx_ury_dist > $llx_lly_dist} {
		set Scale 0.3
	    } else {
		set Scale 0.7
	    }
	    set NewX [expr ($LLX + $Scale*($URX-$LLX))]
	    set NewY [expr ($LLY + $Scale*($URY-$LLY))]
	}
	if ($InvBased) {
	    if {$urx_ury_dist > $llx_lly_dist} {
		set Scale 0.05
		set NewX1 [expr ($LLX + $Scale*($URX-$LLX))]
		set NewY1 [expr ($LLY + $Scale*($URY-$LLY))]
		set Scale 0.5
		set NewX2 [expr ($LLX + $Scale*($URX-$LLX))]
		set NewY2 [expr ($LLY + $Scale*($URY-$LLY))]
	    } else {
		set Scale 0.95
		set NewX1 [expr ($LLX + $Scale*($URX-$LLX))]
		set NewY1 [expr ($LLY + $Scale*($URY-$LLY))]
		set Scale 0.5
		set NewX2 [expr ($LLX + $Scale*($URX-$LLX))]
		set NewY2 [expr ($LLY + $Scale*($URY-$LLY))]

	    }
	}

	if {$BufBased} {
	    incr k
	    #catch {eco_add_repeater -pins $ReqTerms  -cells $buff_cell  -name u_${prefix}_${k} -new_net_name n_${prefix}_${k} -location [list  $NewX $NewY ]}
	    echo "eco_add_repeater -pins $ReqTerms  -cells $buff_cell  -name u_${prefix}_${k} -new_net_name n_${prefix}_${k} -location [list  $NewX $NewY ]"
	} elseif {$InvBased} {
	    incr k
	    #catch {eco_add_repeater -pins $ReqTerms -cells $inv_cell -location [list $NewX1 $NewY1 ] -name u_${prefix}_${k} -new_net_name n_${prefix}_${k}}
	    echo "eco_add_repeater -pins $ReqTerms -cells $inv_cell -location [list $NewX1 $NewY1 ] -name u_${prefix}_${k} -new_net_name n_${prefix}_${k}"
	    incr k
	    #catch {eco_add_repeater -pins $ReqTerms -cells $inv_cell -location [list $NewX2 $NewY2 ] -name u_${prefix}_${k} -new_net_name n_${prefix}_${k}}
	    echo "eco_add_repeater -pins $ReqTerms -cells $inv_cell -location [list $NewX2 $NewY2 ] -name u_${prefix}_${k} -new_net_name n_${prefix}_${k}"
	}
    }  else {
	echo "INFO:: ------> Terms not found for $NetName"
    }
    #echo $ReqTerms
}
################
