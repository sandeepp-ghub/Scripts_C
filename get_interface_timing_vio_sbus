#================================================================================
# Report Interface TranViolations 
# Author : Pavan K (kpavan@marvell.com)
# usage : reportInterfaceTimingVio
# usage : reportInterfaceTimingVio ReportDirectoryName
#================================================================================
#================================================================================
proc reportInterfaceTimingVioSbus {{outdir .}} {
    set _st [clock seconds]
    #=============================================================================================================
    suppress_message TCLCMD 927 513 917 746 1469
    #=============================================================================================================

    set allfpcount [sizeof_collection [all_registers ]]
    set top [get_object_name [current_design]]
    set block_list  [get_object_name [get_cells -quiet pdsbuslows* -filter "is_hierarchical==true"]]
    array set _tmp_hpin {}

    set outfile ${outdir}/${top}_interfaceTim.vio.summary
    set outfilev ${outdir}/${top}_interfaceTim.vio.verbose
    if [file exists $outdir] {} else {mkdir $outdir}
    set fp [open $outfile w+]
    set fpv [open $outfilev w+]

    foreach pd_inst_from $block_list {
	set cell_l  [get_attribute [get_cells $pd_inst_from] ref_name]

	
	set tmp_path_coll [report_timing -collection -through $pd_inst_from/* -hpin -max_slack 0 -nworst 1 -max_paths $allfpcount ]
	set pd_inst_to_list ""
	if {[sizeof_collection $tmp_path_coll ] > 0} {
	    set pd_inst_to_list [lsort -u [get_object_name [get_cells -quiet -of  [get_pins -quiet [get_attribute  [get_attribute $tmp_path_coll timing_points] object] -filter "is_hierarchical==true && pin_direction==in"]]]]
	    #echo "$pd_inst_from ==> \n $pd_inst_to \n"
	}
    

	#block_list
	foreach pd_inst_to $pd_inst_to_list {
	    puts "Processing ::: $pd_inst_from (FROM) ===> $pd_inst_to (TO) ...."
	    set thpath 0
	    #echo "INFO:: $pd_inst_from  ==> $pd_inst_to"
	    set cell_c  [get_attribute [get_cells $pd_inst_to] ref_name]

	    set from_pins [get_pins -quiet $pd_inst_from/* -filter "is_hierarchical==true && pin_direction == out"]
	    set not_from_pins [get_pins -quiet $pd_inst_from/* -filter "is_hierarchical==true && pin_direction == in"]
	    set to_pins [get_pins -quiet $pd_inst_to/* -filter "is_hierarchical==true && pin_direction == in"]
	    set not_to_pins [get_pins -quiet $pd_inst_to/* -filter "is_hierarchical==true && pin_direction == out"]

	    if {"$pd_inst_from" == "$pd_inst_to"} {set thpath 1} else {set thpath 0}
	    set path_coll ""
	    if ${thpath} {
		if { ([sizeof_collection $from_pins] > 0) && ([sizeof_collection $not_from_pins] > 0) } {
		    set path_coll [report_timing -collection -through $from_pins -through $not_from_pins   -max_slack 0 -max_paths $allfpcount -nworst 1 -hpin -unique_pins]
		}
	    } else {
		if { ([sizeof_collection $from_pins] > 0) && ([sizeof_collection $not_to_pins] > 0)  && ([sizeof_collection $to_pins] > 0) } {
		    set path_coll [report_timing -collection -through $from_pins -through $to_pins -not_through $not_to_pins  -max_slack 0 -max_paths $allfpcount -nworst 1 -hpin -unique_pins]
		}
	    }


	    if { [sizeof_collection $path_coll] > 0 } {
		puts $fp [string repeat "-" 175]
		puts $fpv [string repeat "-" 175]
		if ${thpath} {
		    #set fp_through [open ${outdir}/THROUGH_${pd_inst_to}_interface_timing.vio w+]

		    puts $fp "$pd_inst_from \( $cell_l \) ==> $pd_inst_from \( $cell_c \)  (THROUGH PATHS)"
		    puts $fpv "$pd_inst_from \( $cell_l \) ==> $pd_inst_from \( $cell_c \)  (THROUGH PATHS)"
		} else {
		    #set fp_from [open ${outdir}/FROM_${pd_inst_from}_interface_timing.vio w+]
		    #set fp_to [open ${outdir}/FROM_${pd_inst_to}_interface_timing.vio w+]
		    puts $fp "$pd_inst_from \( $cell_l \)  ==> $pd_inst_to \( $cell_c \) "
		    puts $fpv "$pd_inst_from \( $cell_l \)  ==> $pd_inst_to \( $cell_c \) "
		}
		puts $fp [string repeat "-" 175]
		puts $fpv [string repeat "-" 175]
		puts $fp [format "%-50s  %-50s  %-20s %-20s  %-20s %-20s %-6s %6s"  "Launch_hpin-OUT" "Capture_hpin-IN"  "EPClk\(Period - MCP - EDGE - HPINC \)"  "\( LaunchDP == LaunchDP% \)" " \( IntfDP == IntfDP% \)" " \( CapDP ==  CapDP% \)" "Skew" "Slack"]
		puts $fpv [format "%-50s  %-50s  %-20s %-20s  %-20s %-20s %-6s %6s"  "Launch_hpin-OUT" "Capture_hpin-IN"  "EPClk\(Period - MCP - EDGE - HPINC \)"  "\( LaunchDP == LaunchDP% \)" " \( IntfDP == IntfDP% \)" " \( CapDP ==  CapDP% \)" "Skew" "Slack"]
		puts $fp [string repeat "-" 175]
		puts $fpv [string repeat "-" 175]

		array unset _tmp_hpin 

		foreach_in_collection path $path_coll {

		    set spclk [get_object_name [get_attribute $path startpoint_clock]]
		    set epclk [get_object_name [get_attribute $path endpoint_clock]]

		    #set spclk_latency [get_attribute $path startpoint_clock_latency]
		    #set epclk_latency [get_attribute $path endpoint_clock_latency]

		    set spclk_latency [expr [get_attribute $path startpoint_clock_latency] - [get_attribute $path launching_clock_open_edge_time]]
		    set epclk_latency [expr [get_attribute $path endpoint_clock_latency] - [get_attribute $path capturing_clock_close_edge_time]]

		    set skew [expr $epclk_latency - $spclk_latency]

		    set arrival_time [get_attribute $path arrival]
		    set datapath_delay [expr $arrival_time - $spclk_latency]

		    #set period [get_attribute $path period]
		    set period [get_attribute [get_clocks $epclk] period]
		    set slack [get_attribute $path slack]

		    set mcp [format %0.0f [expr ceil([expr [get_attribute $path phase_shift] / [get_attribute $path period]])]]
		    set hpoints [filter_collection [get_attribute $path timing_points] @is_hierarchical==true]
		    set hpointsc [sizeof_collection $hpoints]

		    if [get_attribute $path capturing_clock_is_inverted] {
			set capedge F  
			if {[get_attribute $path capturing_clock_close_edge_type] == "fall"} {
			    set capedge R
			}
		    } else {
			set capedge R 
			if {[get_attribute $path capturing_clock_close_edge_type] == "fall"} {
			    set capedge F
			}
		    }
		    if [get_attribute $path launching_clock_is_inverted] {
			set launchedge F
			if {[get_attribute $path launching_clock_open_edge_type] == "fall"} {
			    set launchedge R
			}
			
		    } else {
			set launchedge R
			if {[get_attribute $path launching_clock_open_edge_type] == "fall"} {
			    set launchedge F
			}

		    }
		    set caplaunchedge "${launchedge}${capedge}"
		    
		    if {[sizeof_collection $hpoints] > 2}  {
			if $thpath {
			    set hpoints [filter_collection [filter_collection [get_attribute $path timing_points] @is_hierarchical==true] @full_name=~${pd_inst_from}*]
			} else {
			    set _tc [filter_collection [filter_collection [get_attribute $path timing_points] @is_hierarchical==true] @full_name=~${pd_inst_from}* ]
			    set _tc1 [filter_collection [filter_collection [get_attribute $path timing_points] @is_hierarchical==true] @full_name=~${pd_inst_to}* ]
			    set _tc_c [expr [sizeof_collection $_tc] -1]
			    set _tc1_c [expr [sizeof_collection $_tc1] -1]
			    set _tc2 [index_collection $_tc $_tc_c] 
			    append_to_collection _tc2 [index_collection $_tc1 0]
			    set hpoints $_tc2
			}
		    }
		    set _ii 0
		    foreach_in_collection hpin $hpoints {
			if {$_ii} {
			    set capture_hpin  [get_object_name [get_attribute $hpin  object]]
			    set capture_hpin_arrival  [get_attribute $hpin arrival]
			    
			} else {
			    set launch_hpin  [get_object_name [get_attribute $hpin  object]]
			    set launch_hpin_arrival  [get_attribute $hpin arrival]
			}
			incr _ii
		    }
		    set processed 0
		    if {[info exists _tmp_hpin(${launch_hpin})]} {
			if {[lsearch -exact $_tmp_hpin(${launch_hpin}) $capture_hpin] > -1} {
			    set processed 1
			} else {
			    set processed 0
			    set _tmp_hpin(${launch_hpin}) "$_tmp_hpin(${launch_hpin}) $capture_hpin"
			}
		    } else {
			set processed 0
			set _tmp_hpin(${launch_hpin}) $capture_hpin
		    }
		    #echo "${processed} ==>  $launch_hpin ==>  $capture_hpin"
		    if {${processed}=="1"}  {
		    } else {

			set launch_hpin_datapath [expr  $launch_hpin_arrival - $spclk_latency]
			set launch_to_capture_hpin_datapath [expr  $capture_hpin_arrival - $launch_hpin_arrival]
			set capture_hpin_datapath [expr $arrival_time - $launch_hpin_arrival - $launch_to_capture_hpin_datapath]

			## w.r.t. current datapath delay
			set total_dealy [expr $launch_hpin_datapath + $launch_to_capture_hpin_datapath + $capture_hpin_datapath]
			set launchPercen [format "%0.2f" [expr $launch_hpin_datapath * 100.00 / $total_dealy]]
			set intfPercen [format "%0.2f" [expr $launch_to_capture_hpin_datapath * 100.00 / $total_dealy]]
			set capturePercen [format "%0.2f" [expr $capture_hpin_datapath * 100.00 / $total_dealy]]

			## w.r.t.t clock delay
			set launchPercen [format "%0.2f" [expr $launch_hpin_datapath * 100.00 / $period]]
			set intfPercen [format "%0.2f" [expr $launch_to_capture_hpin_datapath * 100.00 / $period]]
			set capturePercen [format "%0.2f" [expr $capture_hpin_datapath * 100.00 / $period]]


			puts $fp [format "%-65s  %-65s  %-20s %-20s  %-20s %-20s %-3.3f %-3.3f"  "${launch_hpin}" "${capture_hpin}"  "$epclk\($period - $mcp - $caplaunchedge - $hpointsc\)"  "\( $launch_hpin_datapath == $launchPercen \)" " \( $launch_to_capture_hpin_datapath == $intfPercen \)" " \( $capture_hpin_datapath ==  $capturePercen \)" $skew $slack]
			puts $fpv [format "%-65s  %-65s  %-20s %-20s  %-20s %-20s %-3.3f %-3.3f"  "${launch_hpin}" "${capture_hpin}"  "$epclk\($period - $mcp - $caplaunchedge - $hpointsc\)"  "\( $launch_hpin_datapath == $launchPercen \)" " \( $launch_to_capture_hpin_datapath == $intfPercen \)" " \( $capture_hpin_datapath ==  $capturePercen \)" $skew $slack]

			set _tmv ""
			redirect -var _timv {rt -through ${launch_hpin} -through ${launch_hpin} -hpin -max_paths 1 -max_slack 0}
			puts $fpv ""
			puts $fpv "$_timv"
			puts $fpv ""
			set _tmv ""
			
		    }
		    set processed 0
		}
		puts $fp [string repeat "-" 175]
		puts $fpv [string repeat "-" 175]

	    }
	}

    }
    #================================================================================
    close $fp
    close $fpv
    #================================================================================
    unsuppress_message TCLCMD 927 513 917 746 1469
    set _en [clock seconds]
    #================================================================================
    puts "RunTIme :: [expr $_en - $_st] seconds"
}
#================================================================================
